// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pkg.web.we;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import pkg.domain.PHRStatus;
import pkg.domain.PlantHireRequest;
import pkg.web.we.PlantHireRequestWEController;

privileged aspect PlantHireRequestWEController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PlantHireRequestWEController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        if(PlantHireRequest.findPlantHireRequest(id).getStatus()==PHRStatus.ACCEPTED) {
        	uiModel.addAttribute("param",id);
        	return "we/phrs/newpo";
        }
        uiModel.addAttribute("planthirerequest", PlantHireRequest.findPlantHireRequest(id));
        uiModel.addAttribute("itemId", id);
        return "we/phrs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PlantHireRequestWEController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("planthirerequests", PlantHireRequest.findPlantHireRequestEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PlantHireRequest.countPlantHireRequests() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("planthirerequests", PlantHireRequest.findAllPlantHireRequests(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "we/phrs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PlantHireRequestWEController.update(@Valid PlantHireRequest plantHireRequest, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, plantHireRequest);
            return "we/phrs/update";
        }
        uiModel.asMap().clear();
        plantHireRequest.merge();
        return "redirect:/we/phrs/" + encodeUrlPathSegment(plantHireRequest.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PlantHireRequestWEController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, PlantHireRequest.findPlantHireRequest(id));
        return "we/phrs/update";
    }
    
    void PlantHireRequestWEController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("plantHireRequest_startdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("plantHireRequest_enddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PlantHireRequestWEController.populateEditForm(Model uiModel, PlantHireRequest plantHireRequest) {
        uiModel.addAttribute("plantHireRequest", plantHireRequest);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("phrstatuses", Arrays.asList(PHRStatus.values()));
    }
    
    String PlantHireRequestWEController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
